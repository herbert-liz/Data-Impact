---
title: "Gráfico distribución de edades - Pirámide poblacional"
author: "Herbert Lizama"
date: "2025-09-23"
format: html
---
## Introducción
En este documento aprenderás a crear gráficos de distribución de edades, especificamente la "p*iramide poblacional*", usando Python y las librerías Pandas, Matplotlib y Seaborn. Cubriremos los siguientes temas:

* Cómo crear gráficos con Seaborn
* Mejorar los ejes para hacerlos legibles e informativos
* Agregar un título y leyenda elegantes
* Cuadrículas para múltiples gráficos

Las liberías que usaremos en este archivo son:
```{python}
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
sns.reset_defaults()
sns.reset_orig()

```


## Datos
Usaremos datos de población por edad y sexo del Censo de Población y Vivienda 2020 del INEGI. Puedes descargar los datos desde [aquí](https://www.inegi.org.mx/app/tabulados/interactivos/?pxq=Poblacion_Poblacion_01_e60cd8cf-927f-4b94-823e-972457a12d4b&idrt=123&opc=t).
```{python}
datos = pd.read_csv("poblacion2020.csv")
datos.head()
```

Tenemos seis columnas, descritas a continuación:

* **Entidad:** contiene los diferentes estados de México. Los registros con la Entidad igual a "Estados Unidos Mexicanos" contienen los datos totales nacionales.
* **GrupoEdad:** contiene los grupos quinquenales de edad (0-4, 5-9, 10-14, etc.). Además, hay un grupo adicional con la etiqueta "Total" que contiene el total de todas las edades.
* **Hombres:** contiene el número de hombres en cada grupo de edad y estado.
* **Mujeres:** contiene el número de mujeres en cada grupo de edad y estado.
* **Total:** contiene el número total de personas (hombres + mujeres) en cada grupo de edad y estado.

Por temas de visualización, convertimos en valores negativos los datos de hombres:
```{python}
datos['Hombres'] = -datos['Hombres']
datos.head()
```

## Gráfico básico
Filtramos los datos para obtener solo los registros correspondientes a "Estados Unidos Mexicanos", además de eliminar el grupo de edad "Total":
```{python}
datos_mexico = datos[datos['Entidad'] == 'Estados Unidos Mexicanos']
datos_mexico = datos_mexico[datos_mexico['GrupoEdad'] != 'Total']
```

A continuación, creamos el gráfico base usando seaborn:
```{python}
plt.figure(figsize=(10, 8))
sns.barplot(x='Hombres', y='GrupoEdad', data=datos_mexico, color='#05B2DC', label='Hombres')
sns.barplot(x='Mujeres', y='GrupoEdad', data=datos_mexico, color='#F64740', label='Mujeres')
plt.title('Piramide poblacional México (2020)')
plt.xlabel('Número de Personas')
plt.ylabel('Grupo de Edad')
plt.legend()
plt.gca().invert_yaxis() # Utilizar únicamente si su pirámide está invertida
plt.show()
```

Cómo se observa, el gráfico es funcional, pero puede mejorarse visualmente en varios aspectos, como los ejes, el título y la leyenda.

## Mejoras visuales
En esta sección, aplicaremos algunas mejoras visuales utilizando las capacidades de personalización de Seaborn. Para ello, creamos la siguiente función que nos permitirá reutilizar el código para crear gráficos similares en el futuro:
```{python}
def set_seaborn_style(font_family, background_color, grid_color, text_color):
    sns.set_style({
        "axes.facecolor": background_color,
        "figure.facecolor": background_color,

        "axes.labelcolor": text_color,

        "axes.edgecolor": grid_color,
        "axes.grid": True,
        "axes.axisbelow": True,

        "grid.color": grid_color,

        "font.family": font_family,
        "text.color": text_color,
        "xtick.color": text_color,
        "ytick.color": text_color,

        "xtick.bottom": False,
        "xtick.top": False,
        "ytick.left": False,
        "ytick.right": False,

        "axes.spines.left": False,
        "axes.spines.bottom": True,
        "axes.spines.right": False,
        "axes.spines.top": False,
    }
)
```

Nota como la función `set_seaborn_style` permite personalizar varios aspectos del estilo del gráfico, incluyendo la familia de fuentes, colores de fondo, colores de cuadrícula y colores de texto.

Apliquemos la función a nuestra pirámide poblacional para observar las mejoras:
```{python}
set_seaborn_style(
    font_family="PT Mono",
    background_color="#253D5B",
    grid_color="#355882",
    text_color="#EEEEEE"
)

plt.figure(figsize=(10, 7))
sns.barplot(x='Hombres', y='GrupoEdad', data=datos_mexico, color='#05B2DC', label='Hombres')
sns.barplot(x='Mujeres', y='GrupoEdad', data=datos_mexico, color='#F64740', label='Mujeres')
plt.title('Piramide poblacional México (2020)', fontsize=16, weight='bold')
plt.xlabel('Número de Personas')
plt.ylabel('Grupo de Edad')
plt.legend(title='Sexo')

plt.gca().invert_yaxis() # Utilizar únicamente si su pirámide está invertida
plt.xticks(fontsize=10)
plt.yticks(fontsize=10)
plt.show()
```

Si tenemos los mismos gustos, estaremos de acuerdo en que hay una mejora significativa en la apariencia del gráfico.

## Mejoras informativas
Ahora que el gráfico luce mejor, es momento de hacer que sea más informativo. Particularmente, daremos formato al eje x, de tal forma que los valores aparezcan en miles (K), millones (M) o porcentaje (%), según sea el caso.

```{python}
def create_x_labels(ax, formato):
    if formato == "millones":
        return ["{}M".format(round(abs(x / 1000000))) for x in ax.get_xticks()[1:-1]]
    elif formato == "miles":
        return ["{}K".format(round(abs(x / 1000))) for x in ax.get_xticks()[1:-1]]
    elif formato == "porcentaje":
        return ["{}%".format(round(abs(x), 1)) for x in ax.get_xticks()[1:-1]]
```